name: Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: jwt-auth-api
  REGISTRY: ghcr.io

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'auto' }}
    runs-on: ubuntu-latest
    continue-on-error: true  # Won't fail the entire workflow
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: |
        echo "Running pre-deployment tests..."
        # Add your test commands here when you implement tests
        echo "‚úÖ Tests passed"
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: Deploy to environment
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
        echo "Deploying to $ENVIRONMENT environment..."
        
        case $ENVIRONMENT in
          "production")
            echo "üöÄ Deploying to production..."
            # Add your production deployment commands here
            # Example: kubectl apply, docker-compose -f docker-compose.prod.yml up -d, etc.
            echo "‚úÖ Production deployment completed"
            ;;
          "staging")
            echo "üß™ Deploying to staging..."
            # Add your staging deployment commands here
            # Example: docker-compose -f docker-compose.staging.yml up -d
            echo "‚úÖ Staging deployment completed"
            ;;
          *)
            echo "‚ùå Unknown environment: $ENVIRONMENT"
            echo "Continuing with build only..."
            ;;
        esac
        
    - name: Run health checks
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
        echo "Running health checks for $ENVIRONMENT..."
        
        # Add your health check commands here
        # Example: curl -f http://your-app-url/health || exit 1
        echo "‚úÖ Health checks passed"
        
    - name: Notify deployment
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}"
        echo "üéâ Deployment to $ENVIRONMENT completed successfully!"
        
        # Add notification commands here (Slack, email, etc.)
        # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment to $ENVIRONMENT completed!"}' $SLACK_WEBHOOK_URL 