name: Development Workflow

on:
  push:
    branches-ignore: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality Check
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for syntax errors
      run: |
        echo "Checking for syntax errors..."
        node -c server.js
        node -c logger.js
        node -c view-logs.js
        node -c routes/auth.js
        node -c routes/protected.js
        node -c swagger.js
        echo "✅ No syntax errors found"
        
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=high
      
    - name: Check package.json
      run: |
        echo "Validating package.json..."
        npm run test 2>/dev/null || echo "No test script configured (this is expected)"
        echo "✅ Package.json is valid"
        
    - name: Validate environment files
      run: |
        echo "Checking environment files..."
        if [ -f .env.example ]; then
          echo "✅ .env.example exists"
        else
          echo "❌ .env.example missing"
          exit 1
        fi
        
    - name: Check Docker files
      run: |
        echo "Validating Docker files..."
        if [ -f Dockerfile ]; then
          echo "✅ Dockerfile exists"
        else
          echo "❌ Dockerfile missing"
          exit 1
        fi
        
        if [ -f docker-compose.yml ]; then
          echo "✅ docker-compose.yml exists"
        else
          echo "❌ docker-compose.yml missing"
          exit 1
        fi

  # Build Test
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker build
      run: |
        echo "Testing Docker build..."
        docker build -t jwt-auth-test .
        echo "✅ Docker build successful"
        
    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose..."
        docker-compose config
        echo "✅ Docker Compose configuration is valid"

  # Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files
      run: |
        echo "Checking documentation..."
        
        # Check if README exists
        if [ -f README.md ]; then
          echo "✅ README.md exists"
        else
          echo "⚠️  README.md missing (recommended)"
        fi
        
        # Check if API documentation exists
        if [ -f API_DOCUMENTATION.md ]; then
          echo "✅ API_DOCUMENTATION.md exists"
        else
          echo "⚠️  API_DOCUMENTATION.md missing (recommended)"
        fi
        
        # Check if project notes exist
        if [ -f PROJECT_NOTES.md ]; then
          echo "✅ PROJECT_NOTES.md exists"
        else
          echo "⚠️  PROJECT_NOTES.md missing (recommended)"
        fi
        
        # Check if .env.example exists
        if [ -f .env.example ]; then
          echo "✅ .env.example exists"
        else
          echo "❌ .env.example missing"
          exit 1
        fi

  # Security Check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        
        # Check if .env is not committed
        if [ -f .env ]; then
          echo "❌ .env file should not be committed"
          exit 1
        else
          echo "✅ .env file not committed (good)"
        fi
        
        # Check if logs directory is not committed
        if [ -d logs ]; then
          echo "⚠️  logs directory exists (should be in .gitignore)"
        else
          echo "✅ logs directory not committed (good)"
        fi
        
        # Check .gitignore
        if [ -f .gitignore ]; then
          echo "✅ .gitignore exists"
          
          # Check if sensitive patterns are ignored
          if grep -q "\.env" .gitignore; then
            echo "✅ .env is in .gitignore"
          else
            echo "❌ .env should be in .gitignore"
            exit 1
          fi
          
          if grep -q "logs/" .gitignore; then
            echo "✅ logs/ is in .gitignore"
          else
            echo "❌ logs/ should be in .gitignore"
            exit 1
          fi
        else
          echo "❌ .gitignore missing"
          exit 1
        fi 